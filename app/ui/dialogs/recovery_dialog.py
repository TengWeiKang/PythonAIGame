"""Recovery Dialog for user interaction during error recovery.

This module provides comprehensive UI dialogs for:
- Displaying error information and recovery options
- Getting user input for recovery decisions
- Showing recovery progress and results
- Providing diagnostic information
- Managing safe mode operations
"""
from __future__ import annotations

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import threading
import time
from typing import Dict, List, Any, Optional, Callable
from datetime import datetime
import json

from ...core.error_recovery import (
    FailureContext, RecoveryOption, RecoveryResult, RecoveryStrategy,
    FailureType, Severity, DiagnosticCollector
)
from ...core.safe_mode import SafeModeManager


class RecoveryProgressDialog:
    """Dialog showing recovery operation progress."""

    def __init__(self, parent: tk.Tk, title: str = "Recovery in Progress"):
        self.parent = parent
        self.dialog = tk.Toplevel(parent)
        self.dialog.title(title)
        self.dialog.geometry("400x200")
        self.dialog.resizable(False, False)
        self.dialog.grab_set()

        # Center the dialog
        self.dialog.transient(parent)
        self._center_dialog()

        # Progress tracking
        self.is_complete = False
        self.was_cancelled = False

        self._setup_ui()

    def _center_dialog(self):\n        \"\"\"Center dialog on parent window.\"\"\"\n        self.dialog.update_idletasks()\n        x = (self.parent.winfo_x() + (self.parent.winfo_width() // 2) - \n             (self.dialog.winfo_width() // 2))\n        y = (self.parent.winfo_y() + (self.parent.winfo_height() // 2) - \n             (self.dialog.winfo_height() // 2))\n        self.dialog.geometry(f\"+{x}+{y}\")\n\n    def _setup_ui(self):\n        \"\"\"Setup the progress dialog UI.\"\"\"\n        # Main frame\n        main_frame = ttk.Frame(self.dialog, padding=\"20\")\n        main_frame.pack(fill=tk.BOTH, expand=True)\n\n        # Status label\n        self.status_label = ttk.Label(\n            main_frame, \n            text=\"Initializing recovery...\",\n            font=('TkDefaultFont', 10)\n        )\n        self.status_label.pack(pady=(0, 10))\n\n        # Progress bar\n        self.progress_var = tk.DoubleVar()\n        self.progress_bar = ttk.Progressbar(\n            main_frame,\n            variable=self.progress_var,\n            mode='determinate',\n            length=300\n        )\n        self.progress_bar.pack(pady=(0, 10))\n\n        # Details text (small)\n        self.details_label = ttk.Label(\n            main_frame,\n            text=\"\",\n            font=('TkDefaultFont', 8),\n            foreground='gray'\n        )\n        self.details_label.pack(pady=(0, 15))\n\n        # Cancel button\n        self.cancel_button = ttk.Button(\n            main_frame,\n            text=\"Cancel\",\n            command=self._on_cancel\n        )\n        self.cancel_button.pack()\n\n        # Handle window close\n        self.dialog.protocol(\"WM_DELETE_WINDOW\", self._on_cancel)\n\n    def update_progress(self, progress: float, status: str, details: str = \"\"):\n        \"\"\"Update progress dialog.\"\"\"\n        if self.is_complete:\n            return\n\n        try:\n            self.progress_var.set(progress)\n            self.status_label.config(text=status)\n            if details:\n                self.details_label.config(text=details)\n            self.dialog.update()\n        except tk.TclError:\n            pass  # Dialog might be destroyed\n\n    def complete(self, success: bool, message: str):\n        \"\"\"Mark recovery as complete.\"\"\"\n        self.is_complete = True\n        \n        if success:\n            self.progress_var.set(100)\n            self.status_label.config(text=\"Recovery completed successfully\")\n            self.cancel_button.config(text=\"Close\")\n        else:\n            self.status_label.config(text=\"Recovery failed\")\n            self.cancel_button.config(text=\"Close\")\n        \n        self.details_label.config(text=message)\n        \n        # Auto-close after 3 seconds for successful recoveries\n        if success:\n            self.dialog.after(3000, self.close)\n\n    def close(self):\n        \"\"\"Close the dialog.\"\"\"\n        try:\n            self.dialog.destroy()\n        except tk.TclError:\n            pass\n\n    def _on_cancel(self):\n        \"\"\"Handle cancel button or window close.\"\"\"\n        if not self.is_complete:\n            result = messagebox.askyesno(\n                \"Cancel Recovery\",\n                \"Are you sure you want to cancel the recovery operation?\",\n                parent=self.dialog\n            )\n            if result:\n                self.was_cancelled = True\n                self.close()\n        else:\n            self.close()\n\n\nclass ErrorRecoveryDialog:\n    \"\"\"Main dialog for error recovery user interaction.\"\"\"\n\n    def __init__(self, parent: tk.Tk, context: FailureContext):\n        self.parent = parent\n        self.context = context\n        self.selected_option: Optional[RecoveryOption] = None\n        self.user_choice: Optional[str] = None\n\n        # Create dialog\n        self.dialog = tk.Toplevel(parent)\n        self.dialog.title(\"Error Recovery\")\n        self.dialog.geometry(\"700x600\")\n        self.dialog.resizable(True, True)\n        self.dialog.grab_set()\n        self.dialog.transient(parent)\n\n        # Center dialog\n        self._center_dialog()\n\n        # Setup UI\n        self._setup_ui()\n\n        # Handle window close\n        self.dialog.protocol(\"WM_DELETE_WINDOW\", self._on_close)\n\n    def _center_dialog(self):\n        \"\"\"Center dialog on parent window.\"\"\"\n        self.dialog.update_idletasks()\n        x = (self.parent.winfo_x() + (self.parent.winfo_width() // 2) - \n             (self.dialog.winfo_width() // 2))\n        y = (self.parent.winfo_y() + (self.parent.winfo_height() // 2) - \n             (self.dialog.winfo_height() // 2))\n        self.dialog.geometry(f\"+{x}+{y}\")\n\n    def _setup_ui(self):\n        \"\"\"Setup the main recovery dialog UI.\"\"\"\n        # Create notebook for tabs\n        self.notebook = ttk.Notebook(self.dialog)\n        self.notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)\n\n        # Error Information Tab\n        self._create_error_tab()\n\n        # Recovery Options Tab\n        self._create_recovery_tab()\n\n        # Diagnostics Tab\n        self._create_diagnostics_tab()\n\n        # Button frame\n        button_frame = ttk.Frame(self.dialog)\n        button_frame.pack(fill=tk.X, padx=10, pady=(0, 10))\n\n        # Buttons\n        ttk.Button(\n            button_frame,\n            text=\"View Full Report\",\n            command=self._show_full_report\n        ).pack(side=tk.LEFT, padx=(0, 5))\n\n        ttk.Button(\n            button_frame,\n            text=\"Export Report\",\n            command=self._export_report\n        ).pack(side=tk.LEFT, padx=(0, 5))\n\n        # Right-aligned buttons\n        ttk.Button(\n            button_frame,\n            text=\"Cancel\",\n            command=self._on_close\n        ).pack(side=tk.RIGHT, padx=(5, 0))\n\n        self.execute_button = ttk.Button(\n            button_frame,\n            text=\"Execute Recovery\",\n            command=self._execute_recovery,\n            state=tk.DISABLED\n        )\n        self.execute_button.pack(side=tk.RIGHT, padx=(5, 0))\n\n    def _create_error_tab(self):\n        \"\"\"Create the error information tab.\"\"\"\n        error_frame = ttk.Frame(self.notebook)\n        self.notebook.add(error_frame, text=\"Error Information\")\n\n        # Main container with scrollbar\n        canvas = tk.Canvas(error_frame)\n        scrollbar = ttk.Scrollbar(error_frame, orient=\"vertical\", command=canvas.yview)\n        scrollable_frame = ttk.Frame(canvas)\n\n        canvas.configure(yscrollcommand=scrollbar.set)\n        canvas.bind('<Configure>', lambda e: canvas.configure(scrollregion=canvas.bbox(\"all\")))\n        canvas.create_window((0, 0), window=scrollable_frame, anchor=\"nw\")\n\n        canvas.pack(side=\"left\", fill=\"both\", expand=True)\n        scrollbar.pack(side=\"right\", fill=\"y\")\n\n        # Error summary\n        summary_frame = ttk.LabelFrame(scrollable_frame, text=\"Error Summary\", padding=\"10\")\n        summary_frame.pack(fill=tk.X, padx=5, pady=5)\n\n        # Failure type\n        ttk.Label(\n            summary_frame,\n            text=f\"Failure Type: {self.context.failure_type.value.replace('_', ' ').title()}\",\n            font=('TkDefaultFont', 10, 'bold')\n        ).pack(anchor=tk.W)\n\n        # Severity with color coding\n        severity_color = {\n            Severity.LOW: 'green',\n            Severity.MEDIUM: 'orange',\n            Severity.HIGH: 'red',\n            Severity.CRITICAL: 'darkred'\n        }.get(self.context.severity, 'black')\n\n        severity_label = ttk.Label(\n            summary_frame,\n            text=f\"Severity: {self.context.severity.value.title()}\",\n            font=('TkDefaultFont', 10)\n        )\n        severity_label.pack(anchor=tk.W)\n\n        # Timestamp\n        ttk.Label(\n            summary_frame,\n            text=f\"Occurred: {self.context.timestamp.strftime('%Y-%m-%d %H:%M:%S')}\",\n            font=('TkDefaultFont', 9)\n        ).pack(anchor=tk.W)\n\n        # Affected services\n        if self.context.affected_services:\n            services_frame = ttk.LabelFrame(scrollable_frame, text=\"Affected Services\", padding=\"10\")\n            services_frame.pack(fill=tk.X, padx=5, pady=5)\n\n            for service in self.context.affected_services:\n                ttk.Label(\n                    services_frame,\n                    text=f\"â€¢ {service}\",\n                    font=('TkDefaultFont', 9)\n                ).pack(anchor=tk.W)\n\n        # Error messages\n        if self.context.error_messages:\n            messages_frame = ttk.LabelFrame(scrollable_frame, text=\"Error Messages\", padding=\"10\")\n            messages_frame.pack(fill=tk.X, padx=5, pady=5)\n\n            messages_text = scrolledtext.ScrolledText(\n                messages_frame,\n                height=6,\n                wrap=tk.WORD,\n                font=('Consolas', 9)\n            )\n            messages_text.pack(fill=tk.BOTH, expand=True)\n\n            for i, message in enumerate(self.context.error_messages, 1):\n                messages_text.insert(tk.END, f\"{i}. {message}\\n\\n\")\n            messages_text.config(state=tk.DISABLED)\n\n        # System state summary\n        system_frame = ttk.LabelFrame(scrollable_frame, text=\"System State\", padding=\"10\")\n        system_frame.pack(fill=tk.X, padx=5, pady=5)\n\n        state = self.context.system_state\n        ttk.Label(\n            system_frame,\n            text=f\"Memory Usage: {state.memory_usage_mb:.1f} MB\",\n            font=('TkDefaultFont', 9)\n        ).pack(anchor=tk.W)\n\n        ttk.Label(\n            system_frame,\n            text=f\"CPU Usage: {state.cpu_usage_percent:.1f}%\",\n            font=('TkDefaultFont', 9)\n        ).pack(anchor=tk.W)\n\n        ttk.Label(\n            system_frame,\n            text=f\"Disk Free: {state.disk_free_gb:.1f} GB\",\n            font=('TkDefaultFont', 9)\n        ).pack(anchor=tk.W)\n\n    def _create_recovery_tab(self):\n        \"\"\"Create the recovery options tab.\"\"\"\n        recovery_frame = ttk.Frame(self.notebook)\n        self.notebook.add(recovery_frame, text=\"Recovery Options\")\n\n        # Instructions\n        instructions = ttk.Label(\n            recovery_frame,\n            text=\"Select a recovery option below. Options are sorted by safety and success probability.\",\n            font=('TkDefaultFont', 10),\n            wraplength=600\n        )\n        instructions.pack(pady=10, padx=10)\n\n        # Options frame with scrollbar\n        options_canvas = tk.Canvas(recovery_frame)\n        options_scrollbar = ttk.Scrollbar(recovery_frame, orient=\"vertical\", command=options_canvas.yview)\n        self.options_frame = ttk.Frame(options_canvas)\n\n        options_canvas.configure(yscrollcommand=options_scrollbar.set)\n        options_canvas.bind('<Configure>', lambda e: options_canvas.configure(scrollregion=options_canvas.bbox(\"all\")))\n        options_canvas.create_window((0, 0), window=self.options_frame, anchor=\"nw\")\n\n        options_canvas.pack(side=\"left\", fill=\"both\", expand=True, padx=(10, 0), pady=10)\n        options_scrollbar.pack(side=\"right\", fill=\"y\", padx=(0, 10), pady=10)\n\n        # Create option widgets\n        self.option_var = tk.StringVar()\n        self._create_recovery_options()\n\n    def _create_recovery_options(self):\n        \"\"\"Create recovery option radio buttons.\"\"\"\n        for i, option in enumerate(self.context.recovery_options):\n            # Option frame\n            option_frame = ttk.LabelFrame(\n                self.options_frame,\n                text=f\"Option {i+1}: {option.title}\",\n                padding=\"10\"\n            )\n            option_frame.pack(fill=tk.X, padx=5, pady=5)\n\n            # Radio button\n            radio = ttk.Radiobutton(\n                option_frame,\n                text=\"Select this option\",\n                variable=self.option_var,\n                value=str(i),\n                command=self._on_option_selected\n            )\n            radio.pack(anchor=tk.W)\n\n            # Description\n            desc_label = ttk.Label(\n                option_frame,\n                text=option.description,\n                font=('TkDefaultFont', 9),\n                wraplength=500\n            )\n            desc_label.pack(anchor=tk.W, pady=(5, 0))\n\n            # Metadata\n            meta_frame = ttk.Frame(option_frame)\n            meta_frame.pack(fill=tk.X, pady=(5, 0))\n\n            # Success probability\n            prob_color = 'green' if option.success_probability > 0.7 else 'orange' if option.success_probability > 0.4 else 'red'\n            ttk.Label(\n                meta_frame,\n                text=f\"Success Probability: {option.success_probability:.1%}\",\n                font=('TkDefaultFont', 8),\n                foreground=prob_color\n            ).pack(side=tk.LEFT)\n\n            # Estimated time\n            ttk.Label(\n                meta_frame,\n                text=f\"Estimated Time: {option.estimated_time_seconds}s\",\n                font=('TkDefaultFont', 8),\n                foreground='gray'\n            ).pack(side=tk.LEFT, padx=(20, 0))\n\n            # Safety indicator\n            safety_text = \"Safe\" if option.is_safe else \"Potentially Risky\"\n            safety_color = 'green' if option.is_safe else 'red'\n            ttk.Label(\n                meta_frame,\n                text=safety_text,\n                font=('TkDefaultFont', 8),\n                foreground=safety_color\n            ).pack(side=tk.LEFT, padx=(20, 0))\n\n            # Side effects\n            if option.side_effects:\n                effects_label = ttk.Label(\n                    option_frame,\n                    text=f\"Side Effects: {'; '.join(option.side_effects)}\",\n                    font=('TkDefaultFont', 8),\n                    foreground='orange',\n                    wraplength=500\n                )\n                effects_label.pack(anchor=tk.W, pady=(2, 0))\n\n            # User input required\n            if option.requires_user_input:\n                ttk.Label(\n                    option_frame,\n                    text=\"âš  Requires manual intervention\",\n                    font=('TkDefaultFont', 8),\n                    foreground='blue'\n                ).pack(anchor=tk.W, pady=(2, 0))\n\n    def _create_diagnostics_tab(self):\n        \"\"\"Create the diagnostics tab.\"\"\"\n        diag_frame = ttk.Frame(self.notebook)\n        self.notebook.add(diag_frame, text=\"Diagnostics\")\n\n        # Quick diagnostics\n        quick_frame = ttk.LabelFrame(diag_frame, text=\"Quick System Check\", padding=\"10\")\n        quick_frame.pack(fill=tk.X, padx=10, pady=10)\n\n        # Run diagnostics button\n        self.diag_button = ttk.Button(\n            quick_frame,\n            text=\"Run Quick Diagnostics\",\n            command=self._run_quick_diagnostics\n        )\n        self.diag_button.pack(anchor=tk.W)\n\n        # Diagnostics results\n        self.diag_results = scrolledtext.ScrolledText(\n            diag_frame,\n            height=15,\n            wrap=tk.WORD,\n            font=('Consolas', 9)\n        )\n        self.diag_results.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))\n\n        # Initial diagnostics summary\n        self._show_initial_diagnostics()\n\n    def _show_initial_diagnostics(self):\n        \"\"\"Show initial diagnostic information.\"\"\"\n        self.diag_results.insert(tk.END, \"=== Error Context Diagnostics ===\\n\\n\")\n        \n        # System state\n        state = self.context.system_state\n        self.diag_results.insert(tk.END, f\"System State at Error Time:\\n\")\n        self.diag_results.insert(tk.END, f\"  Memory Usage: {state.memory_usage_mb:.1f} MB\\n\")\n        self.diag_results.insert(tk.END, f\"  CPU Usage: {state.cpu_usage_percent:.1f}%\\n\")\n        self.diag_results.insert(tk.END, f\"  Disk Free: {state.disk_free_gb:.1f} GB\\n\")\n        self.diag_results.insert(tk.END, f\"  Active Threads: {state.active_threads}\\n\")\n        self.diag_results.insert(tk.END, f\"  Open Files: {state.open_files}\\n\\n\")\n\n        # Operation context\n        if self.context.operation_attempted:\n            self.diag_results.insert(tk.END, f\"Operation Attempted: {self.context.operation_attempted}\\n\\n\")\n\n        # Exception info\n        if self.context.exception_info:\n            self.diag_results.insert(tk.END, f\"Exception Type: {self.context.exception_info}\\n\\n\")\n\n        # Stack trace (truncated)\n        if self.context.stack_trace:\n            self.diag_results.insert(tk.END, \"Stack Trace (last 10 lines):\\n\")\n            lines = self.context.stack_trace.strip().split('\\n')\n            for line in lines[-10:]:\n                self.diag_results.insert(tk.END, f\"  {line}\\n\")\n            self.diag_results.insert(tk.END, \"\\n\")\n\n        self.diag_results.config(state=tk.DISABLED)\n\n    def _run_quick_diagnostics(self):\n        \"\"\"Run quick diagnostics and display results.\"\"\"\n        self.diag_button.config(state=tk.DISABLED, text=\"Running...\")\n        \n        def run_diagnostics():\n            try:\n                from ...core.diagnostics import AdvancedDiagnosticEngine\n                \n                diagnostic_engine = AdvancedDiagnosticEngine()\n                report = diagnostic_engine.run_quick_diagnostic()\n                \n                # Update UI in main thread\n                self.dialog.after(0, lambda: self._show_diagnostic_results(report))\n                \n            except Exception as e:\n                error_msg = f\"Diagnostic error: {e}\"\n                self.dialog.after(0, lambda: self._show_diagnostic_error(error_msg))\n        \n        # Run in background thread\n        threading.Thread(target=run_diagnostics, daemon=True).start()\n\n    def _show_diagnostic_results(self, report):\n        \"\"\"Show diagnostic results in the text widget.\"\"\"\n        self.diag_results.config(state=tk.NORMAL)\n        self.diag_results.insert(tk.END, \"\\n=== Quick Diagnostic Results ===\\n\\n\")\n        \n        # Summary\n        self.diag_results.insert(tk.END, f\"Health Score: {report.overall_health_score:.1f}/100\\n\")\n        self.diag_results.insert(tk.END, f\"Performance Score: {report.performance_score:.1f}/100\\n\")\n        self.diag_results.insert(tk.END, f\"Stability Score: {report.stability_score:.1f}/100\\n\\n\")\n        \n        # Findings\n        if report.findings:\n            self.diag_results.insert(tk.END, f\"Found {len(report.findings)} issues:\\n\\n\")\n            \n            for finding in report.findings:\n                severity_symbol = {\n                    'critical': 'ðŸ”´',\n                    'error': 'ðŸŸ ', \n                    'warning': 'ðŸŸ¡',\n                    'info': 'ðŸ”µ'\n                }.get(finding.severity.value, 'âšª')\n                \n                self.diag_results.insert(tk.END, f\"{severity_symbol} {finding.title}\\n\")\n                self.diag_results.insert(tk.END, f\"   {finding.description}\\n\")\n                \n                if finding.recommendations:\n                    self.diag_results.insert(tk.END, f\"   Recommendations: {', '.join(finding.recommendations[:2])}\\n\")\n                self.diag_results.insert(tk.END, \"\\n\")\n        else:\n            self.diag_results.insert(tk.END, \"No issues found in quick diagnostic.\\n\")\n        \n        self.diag_results.config(state=tk.DISABLED)\n        self.diag_button.config(state=tk.NORMAL, text=\"Run Quick Diagnostics\")\n\n    def _show_diagnostic_error(self, error_msg):\n        \"\"\"Show diagnostic error.\"\"\"\n        self.diag_results.config(state=tk.NORMAL)\n        self.diag_results.insert(tk.END, f\"\\n=== Diagnostic Error ===\\n{error_msg}\\n\")\n        self.diag_results.config(state=tk.DISABLED)\n        self.diag_button.config(state=tk.NORMAL, text=\"Run Quick Diagnostics\")\n\n    def _on_option_selected(self):\n        \"\"\"Handle recovery option selection.\"\"\"\n        try:\n            option_index = int(self.option_var.get())\n            self.selected_option = self.context.recovery_options[option_index]\n            self.execute_button.config(state=tk.NORMAL)\n        except (ValueError, IndexError):\n            self.selected_option = None\n            self.execute_button.config(state=tk.DISABLED)\n\n    def _execute_recovery(self):\n        \"\"\"Execute the selected recovery option.\"\"\"\n        if not self.selected_option:\n            messagebox.showwarning(\n                \"No Option Selected\",\n                \"Please select a recovery option first.\",\n                parent=self.dialog\n            )\n            return\n\n        # Confirm risky operations\n        if not self.selected_option.is_safe:\n            result = messagebox.askyesno(\n                \"Risky Operation\",\n                f\"The selected recovery option '{self.selected_option.title}' is potentially risky.\\n\\n\"\n                f\"Side effects: {'; '.join(self.selected_option.side_effects)}\\n\\n\"\n                \"Do you want to proceed?\",\n                parent=self.dialog\n            )\n            if not result:\n                return\n\n        self.user_choice = \"execute\"\n        self.dialog.destroy()\n\n    def _show_full_report(self):\n        \"\"\"Show full diagnostic report in a new window.\"\"\"\n        report_window = tk.Toplevel(self.dialog)\n        report_window.title(\"Full Diagnostic Report\")\n        report_window.geometry(\"800x600\")\n        report_window.transient(self.dialog)\n\n        # Create text widget with scrollbar\n        text_frame = ttk.Frame(report_window)\n        text_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)\n\n        report_text = scrolledtext.ScrolledText(\n            text_frame,\n            wrap=tk.WORD,\n            font=('Consolas', 9)\n        )\n        report_text.pack(fill=tk.BOTH, expand=True)\n\n        # Generate and show report\n        try:\n            report_data = {\n                'error_context': self.context.to_dict(),\n                'system_state': self.context.system_state.to_dict(),\n                'recovery_options': [opt.to_dict() for opt in self.context.recovery_options]\n            }\n            \n            report_json = json.dumps(report_data, indent=2, default=str)\n            report_text.insert(tk.END, report_json)\n            \n        except Exception as e:\n            report_text.insert(tk.END, f\"Error generating report: {e}\")\n        \n        report_text.config(state=tk.DISABLED)\n\n        # Close button\n        ttk.Button(\n            report_window,\n            text=\"Close\",\n            command=report_window.destroy\n        ).pack(pady=10)\n\n    def _export_report(self):\n        \"\"\"Export diagnostic report to file.\"\"\"\n        from tkinter import filedialog\n        \n        filename = filedialog.asksaveasfilename(\n            parent=self.dialog,\n            title=\"Export Diagnostic Report\",\n            defaultextension=\".json\",\n            filetypes=[(\"JSON files\", \"*.json\"), (\"Text files\", \"*.txt\"), (\"All files\", \"*.*\")]\n        )\n        \n        if filename:\n            try:\n                report_data = {\n                    'timestamp': datetime.now().isoformat(),\n                    'error_context': self.context.to_dict(),\n                    'system_state': self.context.system_state.to_dict(),\n                    'recovery_options': [opt.to_dict() for opt in self.context.recovery_options]\n                }\n                \n                with open(filename, 'w', encoding='utf-8') as f:\n                    if filename.endswith('.json'):\n                        json.dump(report_data, f, indent=2, default=str)\n                    else:\n                        # Text format\n                        f.write(f\"Error Recovery Report\\n\")\n                        f.write(f\"Generated: {report_data['timestamp']}\\n\\n\")\n                        f.write(f\"Error Type: {self.context.failure_type.value}\\n\")\n                        f.write(f\"Severity: {self.context.severity.value}\\n\")\n                        f.write(f\"Affected Services: {', '.join(self.context.affected_services)}\\n\\n\")\n                        \n                        for i, msg in enumerate(self.context.error_messages, 1):\n                            f.write(f\"Error {i}: {msg}\\n\")\n                        \n                        f.write(f\"\\nRecovery Options:\\n\")\n                        for i, opt in enumerate(self.context.recovery_options, 1):\n                            f.write(f\"{i}. {opt.title}: {opt.description}\\n\")\n                \n                messagebox.showinfo(\n                    \"Export Successful\",\n                    f\"Report exported to {filename}\",\n                    parent=self.dialog\n                )\n                \n            except Exception as e:\n                messagebox.showerror(\n                    \"Export Failed\",\n                    f\"Failed to export report: {e}\",\n                    parent=self.dialog\n                )\n\n    def _on_close(self):\n        \"\"\"Handle dialog close.\"\"\"\n        self.user_choice = \"cancel\"\n        self.dialog.destroy()\n\n    def show_and_wait(self) -> tuple[Optional[RecoveryOption], str]:\n        \"\"\"Show dialog and wait for user choice.\"\"\"\n        self.dialog.wait_window()\n        return self.selected_option, self.user_choice or \"cancel\"\n\n\nclass SafeModeDialog:\n    \"\"\"Dialog for safe mode operations.\"\"\"\n\n    def __init__(self, parent: tk.Tk, safe_mode_manager: SafeModeManager):\n        self.parent = parent\n        self.safe_mode_manager = safe_mode_manager\n        \n        self.dialog = tk.Toplevel(parent)\n        self.dialog.title(\"Safe Mode Manager\")\n        self.dialog.geometry(\"600x500\")\n        self.dialog.resizable(True, True)\n        self.dialog.grab_set()\n        self.dialog.transient(parent)\n        \n        self._center_dialog()\n        self._setup_ui()\n        self._refresh_status()\n        \n        # Handle window close\n        self.dialog.protocol(\"WM_DELETE_WINDOW\", self._on_close)\n\n    def _center_dialog(self):\n        \"\"\"Center dialog on parent window.\"\"\"\n        self.dialog.update_idletasks()\n        x = (self.parent.winfo_x() + (self.parent.winfo_width() // 2) - \n             (self.dialog.winfo_width() // 2))\n        y = (self.parent.winfo_y() + (self.parent.winfo_height() // 2) - \n             (self.dialog.winfo_height() // 2))\n        self.dialog.geometry(f\"+{x}+{y}\")\n\n    def _setup_ui(self):\n        \"\"\"Setup safe mode dialog UI.\"\"\"\n        # Status frame\n        status_frame = ttk.LabelFrame(self.dialog, text=\"Safe Mode Status\", padding=\"10\")\n        status_frame.pack(fill=tk.X, padx=10, pady=10)\n        \n        self.status_label = ttk.Label(status_frame, text=\"Loading...\", font=('TkDefaultFont', 10, 'bold'))\n        self.status_label.pack(anchor=tk.W)\n        \n        self.details_label = ttk.Label(status_frame, text=\"\", font=('TkDefaultFont', 9))\n        self.details_label.pack(anchor=tk.W, pady=(5, 0))\n        \n        # Feature status frame\n        features_frame = ttk.LabelFrame(self.dialog, text=\"Feature Status\", padding=\"10\")\n        features_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)\n        \n        # Features treeview\n        columns = ('State', 'Priority', 'Stability', 'Last Test')\n        self.features_tree = ttk.Treeview(features_frame, columns=columns, show='tree headings')\n        \n        # Configure columns\n        self.features_tree.heading('#0', text='Feature')\n        self.features_tree.column('#0', width=150)\n        \n        for col in columns:\n            self.features_tree.heading(col, text=col)\n            self.features_tree.column(col, width=100)\n        \n        # Scrollbar for treeview\n        tree_scroll = ttk.Scrollbar(features_frame, orient=tk.VERTICAL, command=self.features_tree.yview)\n        self.features_tree.configure(yscrollcommand=tree_scroll.set)\n        \n        self.features_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)\n        tree_scroll.pack(side=tk.RIGHT, fill=tk.Y)\n        \n        # Button frame\n        button_frame = ttk.Frame(self.dialog)\n        button_frame.pack(fill=tk.X, padx=10, pady=10)\n        \n        # Safe mode controls\n        if self.safe_mode_manager.is_in_safe_mode():\n            ttk.Button(\n                button_frame,\n                text=\"Exit Safe Mode\",\n                command=self._exit_safe_mode\n            ).pack(side=tk.LEFT, padx=(0, 5))\n        else:\n            ttk.Button(\n                button_frame,\n                text=\"Enter Safe Mode\",\n                command=self._enter_safe_mode\n            ).pack(side=tk.LEFT, padx=(0, 5))\n        \n        # Feature controls\n        ttk.Button(\n            button_frame,\n            text=\"Test Selected Feature\",\n            command=self._test_feature\n        ).pack(side=tk.LEFT, padx=(0, 5))\n        \n        ttk.Button(\n            button_frame,\n            text=\"Refresh\",\n            command=self._refresh_status\n        ).pack(side=tk.LEFT, padx=(0, 5))\n        \n        # Close button\n        ttk.Button(\n            button_frame,\n            text=\"Close\",\n            command=self._on_close\n        ).pack(side=tk.RIGHT)\n\n    def _refresh_status(self):\n        \"\"\"Refresh safe mode status display.\"\"\"\n        try:\n            info = self.safe_mode_manager.get_safe_mode_info()\n            \n            if info['active']:\n                self.status_label.config(text=\"Safe Mode: ACTIVE\")\n                reason = info.get('reason', 'Unknown')\n                duration = info.get('duration_minutes', 0)\n                self.details_label.config(\n                    text=f\"Reason: {reason.replace('_', ' ').title()} | Duration: {duration:.1f} minutes\"\n                )\n            else:\n                self.status_label.config(text=\"Safe Mode: INACTIVE\")\n                self.details_label.config(text=\"System running normally\")\n            \n            # Update features tree\n            self.features_tree.delete(*self.features_tree.get_children())\n            \n            feature_status = self.safe_mode_manager.get_feature_status()\n            for feature_name, status in feature_status.items():\n                state_color = {\n                    'enabled': '',\n                    'disabled': 'gray',\n                    'failed': 'red',\n                    'testing': 'blue'\n                }.get(status['state'], '')\n                \n                last_test = status.get('last_test_time')\n                last_test_display = last_test.split('T')[1][:8] if last_test else 'Never'\n                \n                self.features_tree.insert('', tk.END, text=feature_name, values=(\n                    status['state'].title(),\n                    status['priority'],\n                    f\"{status['stability_score']:.2f}\",\n                    last_test_display\n                ), tags=(state_color,))\n            \n            # Configure tag colors\n            self.features_tree.tag_configure('gray', foreground='gray')\n            self.features_tree.tag_configure('red', foreground='red')\n            self.features_tree.tag_configure('blue', foreground='blue')\n            \n        except Exception as e:\n            self.status_label.config(text=f\"Error: {e}\")\n\n    def _enter_safe_mode(self):\n        \"\"\"Enter safe mode manually.\"\"\"\n        result = messagebox.askyesno(\n            \"Enter Safe Mode\",\n            \"Are you sure you want to enter safe mode?\\n\\n\"\n            \"This will disable non-essential features and use minimal configuration.\",\n            parent=self.dialog\n        )\n        \n        if result:\n            from ...core.safe_mode import SafeModeReason\n            success = self.safe_mode_manager.enter_safe_mode(\n                SafeModeReason.MANUAL_ACTIVATION,\n                triggered_by=\"user\"\n            )\n            \n            if success:\n                messagebox.showinfo(\n                    \"Safe Mode Activated\",\n                    \"Safe mode has been activated successfully.\",\n                    parent=self.dialog\n                )\n            else:\n                messagebox.showerror(\n                    \"Failed to Enter Safe Mode\",\n                    \"Failed to activate safe mode. Check logs for details.\",\n                    parent=self.dialog\n                )\n            \n            self._refresh_status()\n\n    def _exit_safe_mode(self):\n        \"\"\"Exit safe mode.\"\"\"\n        result = messagebox.askyesno(\n            \"Exit Safe Mode\",\n            \"Are you sure you want to exit safe mode?\\n\\n\"\n            \"This will attempt to restore full functionality.\",\n            parent=self.dialog\n        )\n        \n        if result:\n            success = self.safe_mode_manager.exit_safe_mode()\n            \n            if success:\n                messagebox.showinfo(\n                    \"Safe Mode Deactivated\",\n                    \"Safe mode has been deactivated successfully.\",\n                    parent=self.dialog\n                )\n            else:\n                messagebox.showerror(\n                    \"Failed to Exit Safe Mode\",\n                    \"Failed to deactivate safe mode. Some features may still be disabled.\",\n                    parent=self.dialog\n                )\n            \n            self._refresh_status()\n\n    def _test_feature(self):\n        \"\"\"Test selected feature.\"\"\"\n        selection = self.features_tree.selection()\n        if not selection:\n            messagebox.showwarning(\n                \"No Selection\",\n                \"Please select a feature to test.\",\n                parent=self.dialog\n            )\n            return\n        \n        feature_name = self.features_tree.item(selection[0])['text']\n        \n        # Show progress\n        progress = RecoveryProgressDialog(self.dialog, f\"Testing {feature_name}\")\n        progress.update_progress(0, f\"Testing feature: {feature_name}\")\n        \n        def test_feature():\n            try:\n                result = self.safe_mode_manager.test_feature(feature_name)\n                message = f\"Feature test {'passed' if result else 'failed'}\"\n                progress.complete(result, message)\n                \n                # Refresh status after test\n                self.dialog.after(1000, self._refresh_status)\n                \n            except Exception as e:\n                progress.complete(False, f\"Test error: {e}\")\n        \n        # Run test in background\n        threading.Thread(target=test_feature, daemon=True).start()\n\n    def _on_close(self):\n        \"\"\"Handle dialog close.\"\"\"\n        self.dialog.destroy()\n\n\n__all__ = [\n    'RecoveryProgressDialog', 'ErrorRecoveryDialog', 'SafeModeDialog'\n]